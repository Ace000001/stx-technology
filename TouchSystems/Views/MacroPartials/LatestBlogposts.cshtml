@using Microsoft.AspNetCore.Http
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels
@using Microsoft.AspNetCore.Mvc.Rendering
@using Umbraco.Cms.Core.Routing
@using Umbraco.Cms.Web.Common
@inherits Umbraco.Cms.Web.Common.Macros.PartialViewMacroPage
@inject UmbracoHelper Umbraco
@inject IPublishedUrlProvider PublishedUrlProvider
@inject IHttpContextAccessor HttpContextAccessor
@{
    var startNodeId = Model.MacroParameters["startNodeId"] ?? Model.Content.Id;

    var numberOfPosts = 3;
    var language = "";
    if (Model.MacroParameters["numberOfPosts"] != null)
    {
        int.TryParse((string)Model.MacroParameters["numberOfPosts"], out numberOfPosts);
    }
}

@if (startNodeId != null)
{@* Get the starting page *@ var startNode = Umbraco.Content(startNodeId);

if (startNode == null)
{
<div class="blogposts">
    <h1>There are no posts at this time, try again later.</h1>
</div> return;
}

var httpContext = HttpContextAccessor.HttpContext;

    //Gets all blogposts to calculate pages
    var blogposts = startNode.Children.OrderBy(x => x.CreateDate).ToList();
    if (!string.IsNullOrEmpty(Model.MacroParameters["language"].ToString()))
    {
        language = (string)Model.MacroParameters["language"];
        blogposts = startNode.Children(m => m.Value<String>("language").ToLower().Contains(language)).OrderBy(x => x.CreateDate).ToList();
    }
    var pageCount = (int)Math.Ceiling((double)blogposts.Count / (double)numberOfPosts);
//gets the page from the querystring and sets it to one if it is out of range
var page = 1;
if (httpContext != null && !string.IsNullOrEmpty(httpContext.Request.Query["page"]))
{
int.TryParse(httpContext.Request.Query["page"], out page);
if (page <= 0 || page > pageCount)
{
    page = 1;
}
}
//Gets the blogposts for the current page
var pagedBlogposts = blogposts.Skip((page - 1) * numberOfPosts).Take(numberOfPosts).ToList();

if (pagedBlogposts.Count > 0)
{

                    <div class="row">

                        @foreach (ContentModels.Blogpost post in pagedBlogposts)
                        {
                            var featuredimage = post.Value<IPublishedContent>("featuredImage");
    <div class="col-xl-4 col-lg-4 col-md-6 col-sm-12 col-12 postcol">
        <div class="postbox">
            <a href="@post.Url(PublishedUrlProvider)" class="blogpost">
                @if (featuredimage != null)
                {
<div class="featuredimg"> <img src="@featuredimage.Url()" alt=""></div>}

                <div class="blogpost-meta">
                    <small class="blogpost-cat">
                        @await Html.PartialAsync("~/Views/Partials/CategoryLinks.cshtml", post.Categories)
                    </small>
                </div>
                <h3 class="blogpost-title">@post.PageTitle</h3>
            </a>
            <div class="blogpost-excerpt">@post.Excerpt</div>

            <div class="blogpost-date">@post.CreateDate.ToLongDateString()</div>
        </div>

    </div>}
                    </div> }

                                    if (blogposts.Count > numberOfPosts)
                                    {
                    <div class="pagination" style="width:100%;">
                        <nav class="nav-bar nav-bar--center">
                            @if (page <= 1)
                            {
        <span class="nav-link nav-link--black nav-link--disabled"><i class="fa fa-angle-left "> </i></span> }
    else
    {
<a class="nav-link nav-link--black" href="@(Model.Content.Url(PublishedUrlProvider) + "?&page=" + (page - 1) + (string.IsNullOrEmpty(language) ? "" : $"&language={language}"))"><i class="fa fa-angle-left "> </i></a>}

                            @for (int i = 1; i <= pageCount; i++)
                            {
        <a class="nav-link nav-link--black @(page == i ? " nav-link--active" : null)" href="@(Model.Content.Url(PublishedUrlProvider) + "?&page=" + i + (string.IsNullOrEmpty(language) ? "" : $"&language={language}"))">@i</a>}
                            @if (page == pageCount)
                            {
        <span class="nav-link nav-link--black nav-link--disabled"><i class="fa fa-angle-right "> </i></span> }
    else
    {
<a class="nav-link nav-link--black" href="@(Model.Content.Url(PublishedUrlProvider) + "?page=" + (page + 1) + (string.IsNullOrEmpty(language) ? "" : $"&language={language}"))"><i class="fa fa-angle-right "> </i></a>}

                        </nav>
                    </div>}
            }

