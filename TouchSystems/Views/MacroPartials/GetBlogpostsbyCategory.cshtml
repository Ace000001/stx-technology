@using Microsoft.AspNetCore.Http
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels
@using Microsoft.AspNetCore.Mvc.Rendering
@using Umbraco.Cms.Core.Routing
@using Umbraco.Cms.Web.Common
@inherits Umbraco.Cms.Web.Common.Macros.PartialViewMacroPage
@inject UmbracoHelper Umbraco
@inject IPublishedUrlProvider PublishedUrlProvider
@inject IHttpContextAccessor HttpContextAccessor
@{ var selectBlog = Model.MacroParameters["selectBlog"] ?? Model.Content.Id;

                var numberOfPosts = 3;
                if (Model.MacroParameters["numberOfPosts"] != null)
                {
                    int.TryParse((string)Model.MacroParameters["numberOfPosts"], out numberOfPosts);
                } }

                    @if (selectBlog != null)
                    {var startNode = Umbraco.Content(selectBlog);
                    
                                    if (startNode == null)
                                    {
                    <div class="blogposts">
                        <h1>There are no posts at this time, try again later.</h1>
                    </div> return;
                }

                var httpContext = HttpContextAccessor.HttpContext;

                //Gets all blogposts to calculate pages
                var blogposts = startNode.Children.OrderBy(x => x.CreateDate).ToList();
                var pageCount = (int)Math.Ceiling((double)blogposts.Count / (double)numberOfPosts);
                //gets the page from the querystring and sets it to one if it is out of range
                var page = 1;
                if (httpContext != null && !string.IsNullOrEmpty(httpContext.Request.Query["page"]))
                {
                    int.TryParse(httpContext.Request.Query["page"], out page);
                    if (page <= 0 || page > pageCount)
                    {
                        page = 1;
                    }
                }
                //Gets the blogposts for the current page
                var pagedBlogposts = blogposts.Skip((page - 1) * numberOfPosts).Take(numberOfPosts).ToList();

                if (pagedBlogposts.Count > 0)
                {
                <div class="blogposts">
                
                    @foreach (ContentModels.Blogpost post in pagedBlogposts)
                    {
                <a href="@post.Url(PublishedUrlProvider)" class="blogpost">
                    <div class="blogpost-meta">
                        <small class="blogpost-date">@post.CreateDate.ToShortDateString()</small>
                        <small class="blogpost-cat">
                            @await Html.PartialAsync("~/Views/Partials/CategoryLinks.cshtml", post.Categories)
                        </small>
                    </div>
                    <h3 class="blogpost-title">@post.PageTitle</h3>
                    <div class="blogpost-excerpt">@post.Excerpt</div>
                </a>}
                </div> }

              